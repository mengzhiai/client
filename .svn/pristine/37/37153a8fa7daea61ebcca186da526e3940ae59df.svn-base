/*
 * @Author: your name
 * @Date: 2020-04-07 15:38:56
 * @LastEditTime: 2020-04-07 16:34:28
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: \custom_html\src\utils\common.js
 */

/**
 * 格式化时间戳
 * @param {number} current 获取的使劲
 * @param {String} connect 日期连接字符,默认是'/'
 */
export const formatDate = (current, connect = '/') => {
  if (current == undefined) {
    return '-'
  }
  const currentDate = new Date(current);
  const year = currentDate.getFullYear();
  const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
  const day = (currentDate.getDate()).toString().padStart(2, '0');
  return `${year}${connect}${month}${connect}${day}`
}

/**
 * 时间戳转化为年月日时分
 * @param {*} current 
 * @param {*} connect 
 */
export const formatDateHM = (current, connect = '/') => {
  if (current == undefined) {
    return '-'
  }
  const currentDate = new Date(current);
  const year = currentDate.getFullYear();
  const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
  const day = (currentDate.getDate()).toString().padStart(2, '0');
  const hour = (currentDate.getHours()).toString().padStart(2, '0');
  const minute = (currentDate.getMinutes()).toString().padStart(2, '0');
  return `${year}${connect}${month}${connect}${day} ${hour}:${minute}`
}


/**
 * 数组合并,目前合并一维
 * @param {Array} arrOne
 * @param {Array} arrTwo
 */
export const arrConcat = (arrOne, arrTwo) => {
  return [...arrOne, ...arrTwo]
}

/**
 * 判断是否是数组
 * @param {Array}} arr
 */
export const arrJudge = arr => {
  if (Array.isArray(arr)) {
    return true
  }
}

/**
 *  判断是否是数字
 * @param {Number}
 */
export const checkNum = data => {
  const reg = /^\d{1,}$/g
  if (reg.test(data)) {
    return true
  }
}

/**
 *  判断是否全部是小写字母
 * @param {Number}
 */
export const checkLowercaseLetter = data => {
  const reg = /^[a-z]+$/g
  if (reg.test(data)) {
    return true
  }
}

/**
 *  判断是否是大写字母
 * @param {Number}
 */
export const checkCapitalLetter = data => {
  const reg = /^[A-Z]+$/g
  if (reg.test(data)) {
    return true
  }
}

/**
 * 判断是否是手机号，只要是13,14,15,16,17,18,19开头即可
 * @param {String}
 */
export const checkTelphone = data => {
  const reg = /^((\+|00)86)?1[3-9]\d{9}$/g
  if (reg.test(data)) {
    return true
  }
}

/**
 * 转金额显示,','分隔
 * @param {*} num 
 * @param {*} fixedNum 
 */
export const toMoneyStr = (num, fixedNum) => {
  if (null == num || '' == num) {
    num = 0
  }
  if (null != fixedNum && fixedNum > 0) {
    num = num.toFixed(fixedNum);
  }
  num = parseFloat(num)
  num = num.toLocaleString();
  return num;
}

/**
 * 将金额转化为中文大写
 * @param {*} str 
 */
function moneyUpper(str) {
  var num = parseInt(str);
  var strOutput = "",
  strUnit = '仟佰拾亿仟佰拾万仟佰拾元角分';
  num += "00";
  var intPos = num.indexOf('.');
  if (intPos >= 0) {
    num = num.substring(0, intPos) + num.substr(intPos + 1, 2);
  }
  strUnit = strUnit.substr(strUnit.length - num.length);
  for (var i = 0; i < num.length; i++) {
    strOutput += '零壹贰叁肆伍陆柒捌玖'.substr(num.substr(i, 1), 1) + strUnit.substr(i, 1);
  }
  return strOutput.replace(/零角零分$/, '整').replace(/零[仟佰拾]/g, '零').replace(/零{2,}/g, '零').replace(/零([亿|万])/g, '$1').replace(/零+元/, '元').replace(/亿零{0,3}万/, '亿').replace(/^元/, "零元")
}


/**
 * 判断身份证是否合格
 * @param {number} idCardStr 
 */
export function isIdCard(idCardStr) {
  let idcardReg = /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$|^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/
  if (idcardReg.test(idCardStr)) {
    return true
  } else {
    return false
  }
}


/**
 * 判断是否是正确的网址
 * @param {String} url
 */
export const checkUrl = url => {
  const a = document.createElement('a')
  a.href = url
  return [
    /^(http|https):$/.test(a.protocol),
    a.host,
    a.pathname !== url,
    a.pathname !== `/${url}`
  ].find(x => !x) === undefined
}

/**
 * 是否为空数组
 * @param {Array} val 
 */
export function isArrayEmpty(val) {
  if (val && val instanceof Array && val.length > 0) {
    return false;
  } else {
    return true;
  }
}

